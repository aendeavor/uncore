variables:
  PROJECT_NAME: "uncore"
  REGISTRY_FQDN: "registry.itbsd.com"
  USER: "georg"

  IMAGE: "${REGISTRY_FQDN}/${USER}/${PROJECT_NAME}/${PROJECT_NAME}"
  VERSION_TAG: "stable"

  ECLINT_VERSION: "2.1.0"
  MAKE_VERSION: "4.2.1-1.2"
  SHELLCHECK_VERSION: "0.7.0-2build2"

# .cache: &cache
#   cache:
#     paths:
#       - .cargo/
#       - .cache/sccache
#       - target/x86_64-unknown-linux-musl/release/${PROJECT_NAME}

stages:
  - checks
  - build
  - docker

linting:
  image: ubuntu:focal-20200925
  stage: checks
  before_script:
    - >
      apt-get -qq --fix-missing update &&
      apt-get -qq -y --no-install-recommends install
      shellcheck=${SHELLCHECK_VERSION} make=${MAKE_VERSION} wget
      &>/dev/null
    - >
      wget -qq --no-check-certificate
      "https://github.com/editorconfig-checker/editorconfig-checker/releases/download/${ECLINT_VERSION}/ec-linux-amd64.tar.gz"
    - tar xf ec-linux-amd64.tar.gz && mv bin/ec-linux-amd64 /usr/bin/eclint && chmod +x /usr/bin/eclint
  script:
    - make lint

# rust-check:
#   image: rust:1.47.0-slim-buster
#   stage: checks
#   script:
#     - cargo fmt --manifest-path ./Cargo.toml --message-format human -- --check
#     - cargo clippy --all-targets --all-features -- -D warnings

# rust-build:
#   image: rust:1.47.0-slim-buster
#   stage: build
#   <<: *cache
#   before_script:
#     - cargo install sccache
#     - export CARGO_HOME="${PWD}/.cargo"
#     - export SCCACHE_DIR="${PWD}/.cache/sccache"
#     - export PATH="/builds/Astrolab-devops/material/.cargo/bin:${PATH}"
#     - export RUSTC_WRAPPER="$CARGO_HOME/bin/sccache"
#   script:
#     - rustup target add x86_64-unknown-linux-musl
#     - cargo build --release --target=x86_64-unknown-linux-musl
#   cache:
#     paths:
#       - .cargo/
#       - .cache/sccache
#   artifacts:
#     paths:
#       - target/x86_64-unknown-linux-musl/release/${PROJECT_NAME}

# docker-build:
#   stage: docker
#   image: docker:latest
#   <<: *cache
#   services:
#     - docker:dind
#   script:
#     # - docker login -u ${USER} -p $CI_JOB_TOKEN ${REGISTRY_FQDN}
#     - docker build --build-arg PROJECT=${PROJECT_NAME} -t "${IMAGE}:${VERSION_TAG}" .
#     # - docker push "${IMAGE}:${VERSION_TAG}"
